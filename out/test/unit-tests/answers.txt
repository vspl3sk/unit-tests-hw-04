1.Использование тестовых заглушек может быть полезным при написании модульных тестов по нескольким причинам:

    - Ускорение выполнения тестов: Заглушки позволяют изолировать модуль, который тестируется, от внешних зависимостей,
        таких как база данных или сетевые вызовы. Это может значительно сократить время выполнения тестов,
        так как нет необходимости инициализировать и обрабатывать эти внешние зависимости.

    - Улучшение контроля над тестовым окружением: Заглушки позволяют контролировать входные данные,
        которые будут использоваться в тестах, а также производить точные проверки и ожидания,
        что помогает создать более предсказуемую и стабильную среду для тестов.

    - Изоляция модуля от внешних изменений: Если внешние зависимости модуля (например, API третьей стороны) меняются,
        использование заглушек позволяет обновить только заглушку, а не сам модуль.
        Это упрощает обслуживание и поддержку кода и устраняет необходимость вносить изменения в модульные тесты
        вследствие изменений внешних зависимостей.

    - Тестирование специфических сценариев и ошибок: Заглушки могут быть настроены для возвращения определенных
        значений или генерации конкретных ошибок, что позволяет тестировать различные сценарии и проверять,
        как будет обрабатываться код в случае возникновения определенных ситуаций.

    - Улучшение параллелизма и распределения тестов: Использование заглушек позволяет запускать тесты одновременно
        и независимо друг от друга, так как они изолированы от внешнего окружения. Это может помочь распределить
        тесты на несколько машин или потоков, что ускорит процесс тестирования.

2. Для проверки, что метод был вызван с определенными аргументами, следует использовать моки (mocks).
    Моки позволяют создать объект, имитирующий поведение реального объекта, и проверить,
    какими аргументами был вызван метод этого объекта. Моки также могут возвращать определенные значения
    или генерировать исключения при вызове метода соответственно заданным условиям.

3. Cледует использовать заглушки Stubs, если просто нужно вернуть определенное значение
    или исключение в ответ на вызов метода.

4. Для имитации взаимодействия с внешним API или базой данных лучше всего использовать Fakes или  Dummy заглушки.

    Fakes являются реализацией альтернативной версии внешнего API или базы данных,
    которая работает в памяти и позволяет эмулировать поведение настоящего API или базы данных.
    Фейковые заглушки обычно используются для более сложной функциональной тестирования,
    когда необходимо проверить правильность взаимодействия с внешними системами.

    Dummy, с другой стороны, просто имитируют взаимодействие с внешними системами,
    не выполняя фактических операций. Они обычно возвращают предопределенные значения или генерируют
    подготовленные ошибки в ответ на вызовы методов. Фиктивные заглушки часто используются для юнит-тестирования,
    когда внешние системы недоступны или имеют сложную настройку для тестов.